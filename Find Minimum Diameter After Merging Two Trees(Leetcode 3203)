class Solution {
    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        int m = edges1.length + 1;
        int n = edges2.length + 1;
        List<List<Integer>> adjList1 = build(m, edges1);
        List<List<Integer>> adjList2 = build(n, edges2);
        int d1 = dia(m, adjList1);
        int d2 = dia(n, adjList2);
        int d =(int) Math.ceil(d1 / 2.0) +(int) Math.ceil(d2 / 2.0) +1;
        return Math.max(Math.max(d1, d2), d);
    }

    public List<List<Integer>> build(int size, int[][] edges) {
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            list.add(new ArrayList<>());
        }
        for (int[] arr : edges) {
            list.get(arr[0]).add(arr[1]);
            list.get(arr[1]).add(arr[0]);
        }
        return list;
    }

    public int dia(int n, List<List<Integer>> list) {
        Pair p = far(n, list, 0);
        int node = p.getFirst();
        Pair s = far(n, list, node);
        return s.getSecond();
    }

    public Pair far(int n,List<List<Integer>> adjList,int sourceNode) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
        queue.add(sourceNode);
        visited[sourceNode] = true;

        int maximumDistance = 0, farthestNode = sourceNode;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int currentNode = queue.poll();
                farthestNode = currentNode;
                for (int neighbor : adjList.get(currentNode)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.add(neighbor);
                    }
                }
            }
            if (!queue.isEmpty()) maximumDistance++;
        }
        return new Pair(farthestNode, maximumDistance);
    }
    class Pair {
        private int first;
        private int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }

        public int getFirst() {
            return first;
        }

        public int getSecond() {
            return second;
        }
    }
}
